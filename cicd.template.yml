Description: CICD pipeline for Hello World
Parameters:
  GithubToken:
    Type: String
    NoEcho: true
    Default: ""
    Description: OAuth token for the Github organization.  Needs read/write access to repos and repo hooks

  GithubOwner:
    Type: String
    Description: Owner of the github repository to track

  GithubRepo:
    Type: String
    Description: Name of the github repository to track

  GithubBranch:
    Type: String
    Default: "master"
    Description: Name of the github branch to track

  PipelineDefinitionBucket:
    Type: String
    Description: Bucket name where the pipeline definition is located

  PipelineDefinitionKey:
    Type: String
    Description: Key name where the pipeline definition is located

Resources:
  DevDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: hello-world.dev.brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !ImportValue cfn-gateway:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-gateway:LoadBalancerDnsName
        - Name: hello-world.dev.brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !ImportValue cfn-gateway:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-gateway:LoadBalancerDnsName

  ProdDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: hello-world.brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !ImportValue cfn-gateway:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-gateway:LoadBalancerDnsName
        - Name: hello-world.brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !ImportValue cfn-gateway:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-gateway:LoadBalancerDnsName

  ArtifactStore:
    Type: AWS::S3::Bucket

  ArtifactStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:*Object
            Resource:
              - !Sub arn:aws:s3:::${ArtifactStore}
              - !Sub arn:aws:s3:::${ArtifactStore}/*
            Principal:
              AWS:
                - !Ref AWS::AccountId
                - !ImportValue cfn-metadata:DevAgentRoleArn
                - !ImportValue cfn-metadata:ProdAgentRoleArn

  DockerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:ListImages
            Principal:
              AWS:
                - !Ref AWS::AccountId
                - !ImportValue cfn-metadata:DevAccountId
                - !ImportValue cfn-metadata:ProdAccountId

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      BadgeEnabled: true
      ServiceRole: !ImportValue cfn-utilities:BuilderRoleArn
      EncryptionKey: !ImportValue cfn-utilities:ArtifactKeyArn
      Environment:
        PrivilegedMode: true
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ARTIFACT_STORE
            Value: !Ref ArtifactStore
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepo}
        Type: LINUX_CONTAINER
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStore
        Name: buildResults.zip
        NamespaceType: BUILD_ID
        Packaging: ZIP
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GithubOwner}/${GithubRepo}.git
        ReportBuildStatus: true
        BuildStatusConfig:
          Context: !Sub AWS CodeBuild - shared (${AWS::StackName}-build)
          TargetUrl: !Sub https://sso.brigh.id/start/shared?destination=https://console.aws.amazon.com/codesuite/codebuild/${AWS::AccountId}/projects/${AWS::StackName}-build/build/$CODEBUILD_BUILD_ID/?region=${AWS::Region}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RestartExecutionOnUpdate: true
      RoleArn: !ImportValue cfn-utilities:MasterRoleArn
      ArtifactStore:
        EncryptionKey: 
          Id: !ImportValue cfn-utilities:ArtifactKeyArn
          Type: KMS
        Location: !Ref ArtifactStore
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !ImportValue cfn-core:CodeStarConnectionArn
                FullRepositoryId: !Sub ${GithubOwner}/${GithubRepo}
                BranchName: !Ref GithubBranch
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: SourceCode
        
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceCode
